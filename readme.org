#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything
#+TITLE: GO First

이 내용은 주로 Go 언어 웹 프로그래밍 철저 입문 과  디스커버리 Go의 내용입니다. 레디북에 있으니 참고 하세요.
개인적으로 아래 첫번째 책을 더 추천 합니다. 

Go 언어 웹 프로그래밍 철저 입문(추천)
https://ridibooks.com/v2/Detail?id=754018613&_s=search&_q=go

디스커버리 Go 
https://ridibooks.com/v2/Detail?id=443000367&_s=search&_q=go




* Go 설치하기

** Ubuntu/Debian Install
   #+BEGIN_EXAMPLE
   sudo apt-get install golang
   #+END_EXAMPLE

** CentOS/Redhat
   #+BEGIN_EXAMPLE
   sudo yum install golang
   #+END_EXAMPLE

** Window
  Install File Downloads: https://golang.org/dl/ 

** GO ROOT Setup
** Default Setting

*** Linux Path
#+BEGIN_EXAMPLE
/usr/local/go 
#+END_EXAMPLE

*** Windows Path 
#+BEGIN_EXAMPLE
C:\Go
#+END_EXAMPLE

*** Custome Path Setting
#+BEGIN_EXAMPLE
export GOROOT=$HOME/go
#+END_EXAMPLE

*** Check Setting
#+BEGIN_EXAMPLE
  go env
#+END_EXAMPLE

* Go Package 

Go 에서는 특정 Maven 이나 Pip 처럼  레파지토리는 가지고 있지 않으며 라이브러리의 저장된 원격 저장소를 지정하여 패키지를 설치 할수 있다.


#+BEGIN_EXAMPLE
 go install buffer
 GOPATH/pkg/<os>

#+END_EXAMPLE

* Go Test

*** Test File
#+BEGIN_EXAMPLE
  [FileName]_test.go
#+END_EXAMPLE

*** Test Func
#+BEGIN_EXAMPLE

  Example[functionName](){
  }
#+END_EXAMPLE

* Go String & Data Struct

** String
   []byte 와 string 은 거의 동일하지만 string의 경우 읽기 전용
   []byte 를 사용할 경우 통신 프로그램에서 처리 하기 좋을것 같다. 

** 문자열 연결

#+NAME: String Format
#+BEGIN_SRC
s := 'abc'
ps := &s
s += "def" //문자열 연결 

s = fmt.Sprint(s,"def") // 문자열이 아닌 변수와도 연결하여 문자열 생성
s = fmt.Sprintf("%sdef",s)  
s = strings.Join([]string{s,"def"},"") // 구분자를 연결할 경우 좋은 방법 (포멧 데이터 생성)
fmt.Println(s)
fmt.Println(*ps)
#+END_SRC

** String to Number
문자열을 숫자로 변경하거나 숫자를 문자열로 변환 하는 방법

#+NAME: StrToInt

#+BEGIN_SRC

	var i int
	var k int64
	var f float64
	var s string
	var err error

	i, err = strconv.Atoi("350")                  // i == 350
	k, err = strconv.ParseInt("cc7fdd", 16, 32) // k == 13402077
	k, err = strconv.ParseInt("0xcc7fdd", 0, 32)  // k == 13402077
	f, err = strconv.ParseFloat("3.14", 64)    // f == 3.14
	s = strconv.Itoa(340)                     // s == "340"
	s = strconv.FormatInt(13402077, 16)      // s == "cc7fdd"

#+END_SRC

** Array and Slice
배열보다는 유연한 구조의 슬라이스의 사용해도 된다. 
배열은 길이가 변할수 없고 슬라이스는 길이가 변할수 있는 배열이라고 할수 있다. 
선언 방식이 명시적이지 않아서 좀 느낌이 좋지는 않네요 

*** 변수 선언 
#+BEGIN_SRC
// Array
fruits := [3]string{"사과","바나나","토마토"}

// Slice 
var fruits []string
fruits := make([]string, n)

#+END_SRC

*** 상수
#+BEGIN_SRC

const limit = 100

const max = 1024 * 1024

const (
    RED = 0
    ORANGE = 1
    YELLOW = 2
)

#+END_SRC

*** enumeration
열거형 상수 
iota : 상수 값을 1씩 증가 시킨다. 

#+BEGIN_SRC

const (
    RED = iota //0
    ORANGE     //1
    YELLOW     //2
)
const (
    _ = iota //ignore
    KB ByteSize = 1 << (10 * iota) //1024
    MB          = 1048576
    GB          = 1073741824
    TB          = 1099511627776 
)


#+END_SRC

*** Slicing

#+BEGIN_SRC
	nums := []int{1, 2, 3, 4, 5}
	fmt.Println(nums)
	fmt.Println(nums[0:3])
	fmt.Println(nums[1:])
	fmt.Println(nums[:3])
#+END_SRC

*** Slice Copy
Copy 문법은 값의 개수가 적은 쪽에 맞추서 복사 하게 됩니다. 
그부분 때문에 아래와 같은 코드를 사용해야 하는 경우가 있습니다.

#+BEGIN_SRC
    src := []int(30,20,50,10,40)
    dest := make([]int, len(src))
    copy(dest, sr)c
#+END_SRC


*** Map
순서가 없으며 해시 테이블로 구현된 자료구조 

#+BEGIN_SRC
var m map[keyType]valueType
    m := make(map[keyType]valueType) // 맵 초기화 
    m := map[keyType]valueType{} //빈맵으로 초기화
    value, ok := m[key] //key 가 m에 emfdjdlTdmaus ok가 true 값을 반환
    map[key] = vlaue
#+END_SRC

맵에서 값만을 추출 하고 싶은경우 

#+BEGIN_SRC

for _, v := range m {
// v를 사용
}

#+END_SRC

*** Set
Go 에서는 직접 Set 자료구조를 제공하지 않고 Map 을 사용하여 구현 할수 있다. 

#+BEGIN_SRC
// map 을 set 처럼사용하기 
func hasDupeRune(s string) bool {
	runeSet := map[rune]struct{}{}
	
	for _, r := range s {
		if _, exists := runeSet[r]; exists{
			return true
		}
	runeSet[r] = struct{}{}
	}
	return false
}

#+END_SRC


*** 파일 입출력

#+BEGIN_SRC


f, err := os.Open(filename)
if err != nil {
    return err
}

defer f.Close()
var num int

if _, err := fmt.Fscanf(f,"%d\n",&num); err == nil {
//  파일 데이터 처리 
}

//==========================================
	f, err := os.Create(filename)
	if err != nil {
		return err // 에러 처리 
	}
	defer f.Close()
	var num int

	if _, err := fmt.Fscanf(f,"%d\n",&num); err == nil {
		return err
	//  파일 데이터 처리 
	}

#+END_SRC

** 함수 
- func 정의되며 반환값을 마지막에 정의 한다. 
- 가변 인자: 마지막 매개변수 타입앞에 생략부호(...) 표기하면 여러개의 값을 배열로 받는다.
- 반환값: Go 에서는 하나 이상의 값을 반환 할수 있으며 하나일 경우 괄호는 생략되며 2개 이상일 경우 괄호로 묶어 준다. 
- _ (blank identifier):go의 경우 사용하지 않는 변수에 대해서 컴파일 에러가 발생 하기 때문에 값을 두개 이상 반환하는 함수를 사용할때 반환 값 중 하나만 필요 할 경우 해당 식별자를 사용한다. 이전에 사용했어도 식별자는 재사용 가능
- 값의 반환 : Go의 경우 Call by Value 가 기본으로사용되며 포인터(* 연산자)를 통해서 Call by reference 를 사용할 수 있다. 

- defer 키워드는 함수가 종료 되기 전까지 특정 구문을 지연 시켰다가 함수가 종료 되기 직전에 구문을 수행한다. Java의 finally 와 같은 개념이다. 

*** 내장함수
- close: 채널을 닫을 때 사용
- len: 문자열, 배열, 슬라이스 , 맵 체널의 요소 개수 확인 
- cap: 배열,슬라이스, 채널의 최대 용량 확인(3장 데이터 타입에서 설명)
- new: 구조체를 위한 메모리 생성할때 사용 
- make: 참조 타입(슬라이스,맵,체널)을 위한 메모리 생성시 사용
- copy: 배열 또는 슬라이스 복사
- append: 슬라이스에 요소 추가(3장 데이터 타입에서 설명)
- panic, recover: 에러 처리에 사용
- complex, real imag: 복소수 처리에 사용 



*** 클로저(익명 함수)
- 클로저는 선언될 때 현재 범위에 있는 변수의 값을 캡처하고 호출될 때 캡쳐한 값을 사용한다. 클로저가 호출될 때 캡처한 값을 사용한다. 클로저가 호출될 때 내부에서 사용하는 변수를 접근 할수 없더라도 선언 시점을 기준으로 해당 변수를 사용
- go 에서는 기본 라이브러리 에서도 함수를 매개 변수로 전달하는것은 흔하다. 

*** 패키지 
- 소문자로 생성
- 소스 파일 하나로 구성된 페키지는 패키지 이름과 소스 파일 이름을 같게 한다.
- 패키지를 호출하고 사용하지 않으면 에러가 발생(_ 식별자를 앞에 써주면 컴파일 가능)
- 패키지 호출시 init() 함수가 먼저 호출 되고 메인에서 호출한 패키지가 있는 경우 호출된 패키지의 init 함수가 호출 된다. 

*** 다른 숫자 형간의 계산
- 서로 다른 숫자 형 계산은 오류 꼭 타입을 변환 해줘야 함 

*** 문자열 조합
문자열은 +,+= 를 이용해서 조합할수 있으나 문자열 조합시 새로운 문자열을 생성하기 때문에 효율적이지 못하다 대신 strings.join() 함수를 사용하거나 bytes.Buffer 타입을 사용 하는것이 효율적이다.

*** 포인터와 참조 타입
Go는 C와 C++ 처럼 포인터 사용을 허용 하여 메모리 주소에 직접 접근 가능
하지만 주소 값 연산을 허용하지는 않음
포인터 변수가 가진 주소 값을 직접 변경할 수는 없다.
포인터 변수는 타입 앞에 * 연산자를 표기하여 선언

**** 포인터 생성
벼눗 앞에 주소 연산자(&)로 특정 값의 메모리 주소를 포인터 변수에 할당
new() 함수로 메모리를 초기화한 후 포인터 변수에 할당 

#+BEGIN_SRC go-lang
p := new(int)
*p = 1
fmt.Println(p) //주소
fmt.Println(*p) //값

#+END_SRC


#+BEGIN_SRC go-lang
type rect struct{w,h float64}

r := new(rect)
r.w,r.h = 3, 4
fmt.Println(r) // &{3,4}
fmt.Println(*r) //{3,4}
#+END_SRC

**** Go 값 전달 
Go 는 함수 호출시 매개 변수 값을 복사헤서 함수에 전달 한다. 
함수의 매개 변수 값을 변경할 수 없다. 
Go 의 배열은 값을 복사해서 함수나 매서드 내부로 전달하며 큰 배열을 함수나 메서드로 전달하면 시스템의 부담을 준다. 대신 슬라이스를 사용하는 것이 좋다. 슬라이스로 전달시 참조가 전달 됨 
구조체의 경우도 값 전체를 복사하기 때문에 시스템의 부담이 준다 그렇때는 구조체 값을 전달 하지 말고 포인터로 전달하여 부담을 줄일 수 있다. 

*** 객체 지향 프로그래밍 
Go는 상태를 표현하는 "타입"과 동작을 표현하는 메서드를 분리하여 정의 한다. 타입은 어떤 값을 표현하는 수단이고 메서드는 특정 타입의 동작을 표현한다.
Go에는 기본 타입 외에 사용자가 타입을 직접 정의 할수 있는 사용자 정의 타입이 있다. 일반적으로는 구조체와 인터페이스를 사용자정의 타입으로 지정해서 쓴다. 
메서드는 사용자 저으이 타입과 함수를 바인딩 시키는 방식을 정의 한다 메서드를 정의할때는 어떤 타입과 연결 할지 리시버를 통해 지정 
func 과 메서드명 사이에 시리버를 지정 


#+BEGIN_SRC


//구조체
type Item struct {
	name string
	price float64
	quantity int
}

메서드 
func (t Item) Cost() float64 {
	return t.price * float64(t.quantity)
}

func main(){
	shirt := Item{name:"Men's Slim-Fit Shirt", price: 25000, quantity:3}

	fmt.Println(shirt.Cost())
}

#+END_SRC

*** 인터페이스 
Go의 인터페이스는 메서드의 묶음이다. 인터페이스에 정의된 메서드와 서명은 같은 메서드가 정의된 타입은 이 인터페이스를 사용할 수 있다 .

*** 리시버의 포인터 지정
참조에 의한 호출로 리시버 변수의 주소를 전달하려면 리시버 타입에 * 를 사용하여 포인터로 지정
리시버를 포인터로 지정하면 메서드 호출시 리시버 변수의 메모리 주소가 전달 되므로 메서드 내부에서 리시버 변수의 값을 변경 할수 있다 .
메서드 내부에서 리시버 변수의 값을 변경해야 할 때만 리시버를 포인터로 지정하고 그외에는 보통 리시버 변수를 값 형태로 넘긴다 .
리시버의 크기가 클 경우도 포인터로 넘긴다. 
슬라이스와 맵의 경우는 참조 타입이기 때문에 포인터를 사용하지 않아도 메서드내에서 리시버의 정보를 수정할수 있다.

*** new() 함수로 구조체 포인터 생성
new() 함수는 제로값으로 초기화된 구조체를 생성된 구조체의 메모리 주소가 담긴 포인터 판환

#+BEGIN_SRC

new(Type) = &Type{}

#+END_SRC

*** 익명 구조체 

#+BEGIN_SRC

rects := []struct {w,h int}{{1,2},{},{-1, -2}}
for _, r := range rects {
fmt.Printf("(%d, %d)",r.w,r.h)
}

#+END_SRC


*** 태그
구조체 필드에 옵션으로 태그를 정의 할수 있다. 태그는 필드에 추가된 문자 열
필드에 중요한 레이블이나 간단한 설명을 추가할수 있음
필드는 feflect.TypeOf() 함수로 확인할 수 있다.


*** 임베딩

. 연산자로 임베디드 필드의 내부 필드에 바로 접근 가능 
임베디드 필드의 내부 필드와 이름이 같은 필드가 있는 때는 필드의 타입을 함께 적어줘야함

*** 메서드 재사용
구조체 임베딩의 편리한 점은 임베디드 필드가 포함된 구조체에서 임베디드 필드에 정의된 메서드를 그대로 사용할 수 있다는 것


*** 오버로딩 
Go 는 이름이 같은 메서드를 생성할 수 없다. 즉, 오버로딩(이름은 같지만 매개 변수가 다른 메서드를 지원하지 않음 


#+BEGIN_SRC

func (r *Reader) Read(b []byte) (n int, err error)
func (r *Reader) ReadByte(b byte, err error)

//생략 부호(...)를 표기하여 가변 인자로 정의하면 오버로딩과 유사하게 사용 가능


func display(values ... string){
for i := 0; i < len(values); i++ {
     fmt.Println(values[i])
}
}

#+END_SRC


*** 인터페이스 
인터페이스의 역할은 객체의 동작을 표현
단순히 동작 방식만 표현


*** 익명 인터페이스


#+BEGIN_SRC

func display(s interface { show()}) {
 s.show()
}

#+END_SRC


*** Go 인터페이스를 이용한 구조
Go는 인터페이스의 특징 덕에 모듈 간 연계가 매우 쉽다. 먼저 전체 플로우를 제어하는 미들웨어를 만들고, 인터페이스 기반으로 전체 플로우를 제어하여 라이브러리나 패키지를 담을수 있는 형태로 미들웨어를 만드는 것은 Go의 일반적인 패턴

*** 인터페이스 임베딩
인터페이스도 다른 인터페이스를 임베딩 할수 있다 

#+BEGIN_SRC

type Itemer interface {
   Coster
   fmt.Stringer
}

#+END_SRC

*** GO 루틴
고루틴은 GO 프로그램 안에서 동시에 독립적으로 실해오디는 흐름의 단위 
고루틴은 정보를 공유하는 방식이 아니라 서로 메시지를 주고 받는 방식으로 동작

*** Go Race Detector
 
#+BEGIN_SRC

go test -race mypkg

go run -race mysrc.go

go build -race mypkg

go install -race mypkg

#+END_SRC


*** 체널 사용시 주의점

Go 에서 문자열과 배열은 변하지 않으므로 체널에 값을 이용해도 안전하다. 하지만 포인터 변수나 참조값(슬라이스,맵)을 채널로 전달할 때는 주소값을 전달되므로 값을 보내는 고루틴과 값을 받는 고루틴을 값을 동시에 수정할 경 예상치 못한 결과 발생
포인터나 참조 값을 전달할 경우 여러 고루틴에서 값을 동시에 수정 할수 없도록 뮤텍스를 통해서 접근을 제한해야한다. 
참조 값을 변경할 위험이 있는 고루틴에는 참조 값을 직접 전달하는 것이 아니라 인터페이스를 전달하는 것도 좋은 방법이다. 인터페이스를 전달하는 것도 좋은 방법이다. 참조 값에 대한 읽기 전용 인터페이스를 만들고 체널로 읽기 전용 인터페이스를 전달하면 안전하게 참조 

#+BEGIN_SRC

type mapGetter interface {
    Get(s string)interface{}
}

type stringMap map[string] interface{}

func (m stringMap) Get(s string) interface{} {return m[s]}
// stringMap을 직접 전달하지 않고 mapGetter 인터페이스를 체널로 전달 

 func process (g <-chan mapGetter) {
 ...
 map := <-g

 value := map.Get("key")


}


#+END_SRC


*** 체널
채널은 기본적으로 양방향 통신이 가능한 상태로 만들어짐
채널을 단방향으로 사용할때는 반드시 방향을 지정해 주는 것이 좋다. 
#+BEGIN_SRC
chan<- string // 송신 전용 채널
<-chan string // 수신 전용 채널
#+END_SRC

*** 버퍼드 채널 
채널은 지정한 크기의 버퍼를 가질수 잇다. 채널을 생성할때 버퍼의 크기를 make의 두 번째 매개변수로 전달하면 버퍼드 채널을 만들수 있다.

 ch := make(chan int, 100)

버퍼드 채널은 비동기 방식으로 동작한다. 채널이 꽉찰때까지 채널로 메시지를 계속 전송할 수 있고 채널이 빌때 까지 체널로부터 메시지를 계속 수신해 올 수 있다.


*** 채널 close , range

v, ok := <-ch

ok 의 false 라면 채널에 더는 수신할 값이 없고 채널이 닫힌 상태

for i := range c 는 채널 c 가 닫힐때 까지 반복하며 체널의 수신을 시도 


*** select

select 문은 하나의 고루틴이 여러 채널과 통신할때 사용한다. clase로 여러 채널을 대기시키고 있다가 실행 가능 상태가 된 채널이 있으면 해당 케이스를 수행


*** sync.RWMutex
sync.RWMutex 는 sync.Mutex 와 동작방식 유사 하나 sync.RWMutex 는 읽기 동작과 쓰기 동작을 나누어 잠금 처리할 수 있다. 

- 읽기 잠금
  읽기 잠금은 읽기 작업에 한해서 공유 데이터가 변하지 않을을 보장해준다. 즉, 읽기 잠금으로 잠금 처리해도 다른 고루틴에서 잠금 처리한 데이터를 읽을수 있지만 변경불가 
  읽기 가능 변경 불가

- 쓰기 잠금
  쓰기 잠금은 공유 데이텨에 쓰기 작업으로 보장하기 위한 것으로 쓰기 잠금으로 잠금 처리하면 고른 고루틴에서 읽기 쓰기 모두 불가
  읽기 쓰기 모두 불가

+ func (rw *RWMutex) Lock():쓰기 잠금
+ func (rw *RWMutex) Unlock():쓰기 잠금 해제
+ func (rw *RWMutex) RLock(): 읽기 잠금
+ func (rw *RWMutex) RUnlock(): 읽기 잠금 해제

*** sync.Once
    특정 함수를 한번만 수행해야 할 경우 사용
    func (o *Once) Do(f func()) 제공

    해당 함수의 초기화 기능에 사용 가능 



